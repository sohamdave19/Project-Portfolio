import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as pxp
from sklearn.cluster import KMeans

# Creates data
data = pd.DataFrame([[60,41000],
[61,46000],
[62,49000],
[63,39000],
[62,45000],
[61,50000],
[60,46000],
[50,76000],
[57,82000],
[60,58000],
[55,80000],
[54,81000],
[57,84000],
[53,81000],
[32,90000],
[36,86000],
[39,90000],
[31,91000],
[37,85000],
[39,88000]],
    columns=['AccountAge', 'CurrentMileageBalance'])

# Displays head of the dataframe
print(data.head())

# Displays distribution of account age and balance using Seaborn's distplot function
plt.figure(figsize=(22, 10))
plotnum = 1
for cols in ['AccountAge', 'CurrentMileageBalance']:
    if plotnum <= 2:
        axs = plt.subplot(1, 3, plotnum)
        sns.distplot(data[cols])
        plotnum += 1
mileageCoords = sns.distplot(data['CurrentMileageBalance']).get_lines()[0].get_data()
plt.tight_layout()
plt.show()

# Creates variables for account age ranges and plots a bar graph
time_above_71 = data.AccountAge[data.AccountAge >= 71]
time_56_70 = data.AccountAge[(data.AccountAge >= 56) & (data.AccountAge <= 70)]
time_41_55 = data.AccountAge[(data.AccountAge >= 46) & (data.AccountAge <= 55)]
time_26_40 = data.AccountAge[(data.AccountAge >= 26) & (data.AccountAge <= 40)]
time_0_25 = data.AccountAge[(data.AccountAge >= 0) & (data.AccountAge <= 25)]
x_age_ax = ['0-25', '26-40', '41-55', '56-70', '71+']
y_age_ax = [len(time_0_25.values), len(time_26_40.values), len(time_41_55.values),
            len(time_56_70.values), len(time_above_71.values)]
pxp.bar(data_frame=data, x=x_age_ax, y=y_age_ax, color=x_age_ax, title='Count of Accounts by Age (Months)')

# Elbow method to visualize desired K value
x_input = data.loc[:, ['AccountAge', 'CurrentMileageBalance']].values
wcss = []
for k in range(1, 12):
    k_means = KMeans(n_clusters=k, init='k-means++', random_state=0)
    k_means.fit(x_input)
    wcss.append(k_means.inertia_)
plt.figure(figsize=(15, 8))
plt.plot(range(1, 12), wcss, linewidth=2, marker='8')
plt.title('Elbow method\n', fontsize=18)
plt.xlabel('K')
plt.ylabel('WCSS')
plt.show()

# Displays the cluster graph
k_means = KMeans(n_clusters=3, random_state=0)
labels = k_means.fit_predict(x_input)
plt.figure(figsize=(16, 10))
plt.scatter(x_input[:, 0], x_input[:, 1], c=k_means.labels_, s=105)
fig = plt.scatter(k_means.cluster_centers_[:, 0], k_means.cluster_centers_[:, 1], color='red', s=250)
plt.title('Airline Points Clusters\n', fontsize=20)
plt.xlabel('AccountAge')
plt.ylabel('CurrentMileageBalance')
plt.show()
points = fig.get_offsets()
